#pragma warning(disable : 4996)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_NAME_LENGTH 100
#define MAX_SPECIALIZATION_LENGTH 100
#define MIN_AGE 18
#define MAX_AGE 100
#define MIN_YEAR 1
#define MAX_YEAR 6

// Define the structure for a student
typedef struct {
    char name[MAX_NAME_LENGTH];
    int age;
    char gender;
    char specialization[MAX_SPECIALIZATION_LENGTH];
    int studentYear;
} Student;

// Function prototypes
int validate_student(const Student* student);
void load_students(const char* filename, Student** students, size_t* student_count);
void save_students(const char* filename, Student* students, size_t student_count);
void display_students(const Student* students, size_t student_count);
void add_student(Student** students, size_t* student_count);
void delete_student(Student** students, size_t* student_count);
void edit_student(Student* students, size_t student_count);
void sort_students(Student* students, size_t student_count);
void display_menu(Student** students, size_t* student_count);

// Validation function
int validate_student(const Student* student) {
    // Name validation (must not be empty and must not contain digits)
    if (strlen(student->name) == 0) {
        printf("Invalid name. Name cannot be empty.\n");
        return 0;
    }

    for (size_t i = 0; i < strlen(student->name); i++) {
        if (isdigit(student->name[i])) {
            printf("Invalid name. Name cannot contain numbers.\n");
            return 0;
        }
    }

    // Age validation (must be a positive number between 18 and 100)
    if (student->age < MIN_AGE || student->age > MAX_AGE) {
        printf("Invalid age. Must be between %d and %d.\n", MIN_AGE, MAX_AGE);
        return 0;
    }

    // Gender validation (must be 'M' or 'F')
    if (student->gender != 'M' && student->gender != 'F') {
        printf("Invalid gender. Must be 'M' or 'F'.\n");
        return 0;
    }

    // Specialization validation (must not be empty)
    if (strlen(student->specialization) == 0) {
        printf("Invalid specialization. Specialization cannot be empty.\n");
        return 0;
    }

    // Validation of the year of study (must be between 1 and 6, for example)
    if (student->studentYear < MIN_YEAR || student->studentYear > MAX_YEAR) {
        printf("Invalid student year. Must be between %d and %d.\n", MIN_YEAR, MAX_YEAR);
        return 0;
    }

    return 1;
}

// Function to load students from a file
void load_students(const char* filename, Student** students, size_t* student_count) {
    FILE* file = fopen(filename, "r");
    if (!file) {
        perror("Could not open file");
        return;
    }

    char line[256];
    while (fgets(line, sizeof(line), file)) {
        *students = (Student*)realloc(*students, ((*student_count) + 1) * sizeof(Student));
        if (*students == NULL) {
            perror("Failed to allocate memory");
            fclose(file);
            exit(EXIT_FAILURE);
        }

        if (sscanf(line, "%99[^,], %d, %c, %99[^,], %d",
            (*students)[*student_count].name,
            &(*students)[*student_count].age,
            &(*students)[*student_count].gender,
            (*students)[*student_count].specialization,
            &(*students)[*student_count].studentYear) != 5) {
            fprintf(stderr, "Error parsing line: %s\n", line);
            continue;
        }

        // Validate student data
        if (!validate_student(&(*students)[*student_count])) {
            fprintf(stderr, "Invalid student data: %s\n", line);
            continue;
        }

        (*student_count)++;
    }

    fclose(file);
}

// Function to save students to a file
void save_students(const char* filename, Student* students, size_t student_count) {
    FILE* file = fopen(filename, "w");
    if (!file) {
        perror("Could not open file");
        return;
    }

    for (size_t i = 0; i < student_count; i++) {
        fprintf(file, "%s, %d, %c, %s, %d\n",
            students[i].name,
            students[i].age,
            students[i].gender,
            students[i].specialization,
            students[i].studentYear);
    }

    fclose(file);
}

// Function to display students
void display_students(const Student* students, size_t student_count) {
    for (size_t i = 0; i < student_count; i++) {
        printf("Name: %s, Age: %d, Gender: %c, Specialization: %s, Student Year: %d\n",
            students[i].name, students[i].age, students[i].gender, students[i].specialization, students[i].studentYear);
    }
}

// Function to read a string with `fgets` and remove newline
void read_string(char* buffer, size_t size) {
    if (fgets(buffer, size, stdin)) {
        buffer[strcspn(buffer, "\n")] = '\0';
    }
}

// Function to add a student
void add_student(Student** students, size_t* student_count) {
    *students = (Student*)realloc(*students, ((*student_count) + 1) * sizeof(Student));
    if (*students == NULL) {
        perror("Failed to allocate memory");
        exit(EXIT_FAILURE);
    }

    printf("Enter name: ");
    read_string((*students)[*student_count].name, sizeof((*students)[*student_count].name));

    printf("Enter age: ");
    if (scanf("%d", &(*students)[*student_count].age) != 1) {
        printf("Invalid input for age.\n");
        getchar(); // Clear invalid input
        return;
    }
    getchar(); // Clear newline

    printf("Enter gender (M/F): ");
    if (scanf("%c", &(*students)[*student_count].gender) != 1 ||
        ((*students)[*student_count].gender != 'M' && (*students)[*student_count].gender != 'F')) {
        printf("Invalid input for gender.\n");
        getchar(); // Clear invalid input
        return;
    }
    getchar(); // Clear newline

    printf("Enter specialization: ");
    read_string((*students)[*student_count].specialization, sizeof((*students)[*student_count].specialization));

    printf("Enter student year: ");
    if (scanf("%d", &(*students)[*student_count].studentYear) != 1) {
        printf("Invalid input for student year.\n");
        getchar(); // Clear invalid input
        return;
    }
    getchar(); // Clear newline

    // Validate student data
    if (!validate_student(&(*students)[*student_count])) {
        printf("Invalid student data. Please try again.\n");
        return;
    }

    (*student_count)++;
}

// Function to delete a student
void delete_student(Student** students, size_t* student_count) {
    char name[MAX_NAME_LENGTH];
    printf("Enter name of student to delete: ");
    read_string(name, sizeof(name));

    size_t index = *student_count;
    for (size_t i = 0; i < *student_count; i++) {
        if (strcmp((*students)[i].name, name) == 0) {
            index = i;
            break;
        }
    }

    if (index == *student_count) {
        printf("Student not found.\n");
        return;
    }

    for (size_t i = index; i < *student_count - 1; i++) {
        (*students)[i] = (*students)[i + 1];
    }

    (*student_count)--;
    *students = (Student*)realloc(*students, (*student_count) * sizeof(Student));
    if (*students == NULL && *student_count > 0) {
        perror("Failed to allocate memory");
        exit(EXIT_FAILURE);
    }
}

// Function to edit a student
void edit_student(Student* students, size_t student_count) {
    char name[MAX_NAME_LENGTH];
    printf("Enter name of student to edit: ");
    read_string(name, sizeof(name));

    size_t index = student_count;
    for (size_t i = 0; i < student_count; i++) {
        if (strcmp(students[i].name, name) == 0) {
            index = i;
            break;
        }
    }

    if (index == student_count) {
        printf("Student not found.\n");
        return;
    }

    printf("Enter new name: ");
    read_string(students[index].name, sizeof(students[index].name));

    printf("Enter new age: ");
    if (scanf("%d", &students[index].age) != 1) {
        printf("Invalid input for age.\n");
        getchar(); // Clear invalid input
        return;
    }
    getchar(); // Clear newline

    printf("Enter new gender (M/F): ");
    if (scanf("%c", &students[index].gender) != 1 ||
        (students[index].gender != 'M' && students[index].gender != 'F')) {
        printf("Invalid input for gender.\n");
        getchar(); // Clear invalid input
        return;
    }
    getchar(); // Clear newline

    printf("Enter new specialization: ");
    read_string(students[index].specialization, sizeof(students[index].specialization));

    printf("Enter new student year: ");
    if (scanf("%d", &students[index].studentYear) != 1) {
        printf("Invalid input for student year.\n");
        getchar(); // Clear invalid input
        return;
    }
    getchar(); // Clear newline

    // Validate student data
    if (!validate_student(&students[index])) {
        printf("Invalid student data. Changes not saved.\n");
        return;
    }
}

// Function to sort students
void sort_students(Student* students, size_t student_count) {
    for (size_t i = 0; i < student_count - 1; i++) {
        for (size_t j = i + 1; j < student_count; j++) {
            if (strcmp(students[i].name, students[j].name) > 0) {
                Student temp = students[i];
                students[i] = students[j];
                students[j] = temp;
            }
        }
    }
}

void display_menu(Student** students, size_t* student_count) {
    int choice;
    do {
        printf("\nMenu:\n");
        printf("1. Display students in alphabetical order\n");
        printf("2. Add student\n");
        printf("3. Delete student\n");
        printf("4. Edit student\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        if (scanf("%d", &choice) != 1) {
            printf("Invalid input. Please try again.\n");
            getchar(); // Clear invalid input
            continue;
        }
        getchar(); // Clear newline

        switch (choice) {
        case 1:
            sort_students(*students, *student_count);
            display_students(*students, *student_count);
            break;
        case 2:
            add_student(students, student_count);
            save_students("students.csv", *students, *student_count);
            break;
        case 3:
            delete_student(students, student_count);
            save_students("students.csv", *students, *student_count);
            break;
        case 4:
            edit_student(*students, *student_count);
            save_students("students.csv", *students, *student_count);
            break;
        case 5:
            save_students("students.csv", *students, *student_count);
            break;
        default:
            printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 5);
}

int main() {
    Student* students = NULL;
    size_t student_count = 0;

    load_students("students.csv", &students, &student_count);
    display_menu(&students, &student_count);

    // Clean up
    free(students);
    return 0;
}
